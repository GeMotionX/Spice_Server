#!/usr/bin/env python
# encoding: utf-8

####Created by Denny C. Ng on Mar 16, 2015
#Copyright @Tsinghua University

import sys, os, os.path
import glob

from datetime import date, time, datetime, timedelta
import time

import smtplib
from email.mime.text import MIMEText

import os
from os.path import join, getsize

import MySQLdb

root = "path"

MySQLAddr = 'addr'
MySQLUser = 'usr'
MySQLPass = 'pass'
MySQLDB = 'db'

_user = "xxx@xxx.xx"
_pwd  = "xxx"
_to   = "GeMotionX@gmail.com"

############### MYSQL DATABASE  HANDELER SOURCE CODE ####################

def dbTest():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        cursor.execute("SELECT VERSION()")
        data = cursor.fetchone()
        print "Database version : %s " % data
        db.close()

        
def dbInsert(crtime, uuid, type_of_file):
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "INSERT INTO LUCIFER(ctime, \
               uuid, file) \
               VALUES ('%s', '%s', '%s')" % \
               (crtime, uuid, type_of_file)
        try:
           cursor.execute(sql)
           db.commit()
        except:
           # Rollback in case there is any error
           db.rollback()
           
        finally:
                db.close()
                
def dbLUCIFERClear():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "DELETE FROM LUCIFER"
        try:
           cursor.execute(sql)
           db.commit()
        except:
           # Rollback in case there is any error
           db.rollback()
           
        finally:
                db.close()
                
def isInLUCIFER(crtime, uuid, type_of_file):
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT * FROM LUCIFER \
               WHERE ctime = '%s' AND uuid = '%s' \
               AND file = '%s'" % (crtime, uuid, type_of_file)
        try:
           cursor.execute(sql)
           results = cursor.fetchall()
           if results is not None:
                   for row in results:
                           return 0 
           return None
                                     
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
                

def dbGetCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(uuid) FROM LUCIFER"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
        
        
        
def isDeviceExist(uuid):
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT * FROM TWIDERE \
               WHERE uuid = '%s'" % (uuid)
        try:
           cursor.execute(sql)
           results = cursor.fetchall()
           if results is not None:
                   for row in results:
                           return row[1]  
           return None
                                     
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
    
                
def isTwitterExist(twitter):
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT * FROM TWIDERE \
               WHERE twitter = '%s'" % (twitter)
        try:
           cursor.execute(sql)
           results = cursor.fetchall()
           if results is not None:
                   for row in results:
                           return row[0]  
           return None               
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()


def dbGetTwitterCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(DISTINCT twitter) FROM TWIDERE"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()

def dbGetUUIDCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(DISTINCT uuid) FROM TWIDERE"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
                
def dbGetZombieCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(original) FROM UUIDMAP"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()        

#########################################################################


#########################FILE SIZE HANDLER ******************************

def sendMail(msg):
        msg = MIMEText(msg)
        msg["Subject"] = '[' + datetime.now().strftime('%Y-%m-%d %H:%M:%S') + '] Spice Server Reports'
        msg["From"]    = _user
        msg["To"]      = _to

        s = smtplib.SMTP("smtp.qq.com", timeout=30)
        s.login(_user, _pwd)
        s.sendmail(_user, _to, msg.as_string())
        s.close()
        

def handlerTime(crTime):
        return crTime[0:4] + '-' + crTime[4:6] + '-' + crTime[6:8] + '  ' + crTime[8:10] + ':' + crTime[10:12] + ':' + crTime[12:14] 
        

def sizeof_fmt(num, suffix='B'):
    num = int(num)
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)
    

def getSize(Sfile):
        return os.path.getsize(Sfile)

          
            
def getProfileSize(uuid, twitter):
        for name in os.listdir(root):
                if os.path.isfile(os.path.join(root,name)):
                        if len(name.split('-')) > 1:
                                spiceName = name.split('-')[1]
                                if spiceName.split('_')[0] != uuid:
                                        continue
                                else:
                                        if spiceName.split('_')[1] == twitter:
                                                return sizeof_fmt(getSize(root + '/' + name))
                                        else:
                                                continue                                      
                                                

def alarm(UUID, fType, crTime, isUUID, isTwitter):
        if isUUID is None:
                if isTwitter is None:
                        return '\t\tNew Check-in Device [' + UUID +  ']! and New Check-in Twitter [' + fType + '] ! Received on ' + handlerTime(crTime) + '\tfile size: '+ str(getProfileSize(UUID,fType)) + '\n\n'
                else:
                        return '\t\tNew Check-in Device [' + UUID +  ']! but already Checked-in Twitter [' + fType + '] ! Received on ' + handlerTime(crTime) + '\tfile size: '+ str(getProfileSize(UUID,fType)) + '\n\n'
        else:
                if isTwitter is None:
                        return '\t\tAlready Checked-in Device [' + UUID +  ']! but New Check-in Twitter [' + fType + '] ! Received on ' + handlerTime(crTime) + '\tfile size: '+ str(getProfileSize(UUID,fType)) + '\n\n'
                else:
                        return '\t\tAlready Checked-in Device [' + UUID +  ']! and already Checked-in Twitter [' + fType + '] ! Received on ' + handlerTime(crTime) + '\tfile size: '+ str(getProfileSize(UUID,fType)) + '\n\n'
     
        

def LUCIFER():
        file_number = 0
        is_new_file = False
        message_for_mail = ''
        num_of_app = 0
        num_of_network = 0
        num_of_onwifi = 0
        num_of_onlaunch = 0
        num_of_location = 0
        num_of_twitter = 0
        exist_file = dbGetCount()
        malicious_info = '\n\tThe Following might be the malicous files: '
        for name in os.listdir(root):
                if os.path.isfile(os.path.join(root,name)):
                        file_number += 1
                        try:
                            if len(name.split('-')) > 1:
                                    crTime = name.split('-')[0]
                                    spiceName = name.split('-')[1]
                                    UUID = spiceName.split('_')[0]
                                    fType = spiceName.split('_')[1]
                                    if fType == 'Network':
                                        num_of_network += 1
                                    elif fType == 'onWifi':
                                        num_of_onwifi += 1
                                    elif fType == 'onLaunch':
                                        num_of_onlaunch += 1
                                    elif fType == 'Location':
                                        num_of_location += 1
                                    elif fType == 'App':
                                        num_of_app += 1
                                    elif fType.isdigit():
                                        num_of_twitter += 1
                                    
                                    ret = isInLUCIFER(crTime, UUID, fType)
                                    if ret is None:
                                            is_new_file = True
                                            dbInsert(crTime, UUID, fType)
                                            if fType.isdigit():
                                                    message_for_mail += alarm(UUID, fType, crTime, isDeviceExist(UUID), isTwitterExist(fType))
                        except:
                            malicious_info = malicious_info + name + '||'
                            continue
                                        
        
        
        if file_number == 0 or file_number < exist_file:
                dbLUCIFERClear()
        if is_new_file == True:
                result_of_receiving = 'Until yesterday, there are already %d devices and %d twitter accounts join twidere-spice, but %d zombie devices.\n\n' % (dbGetUUIDCount(), dbGetTwitterCount(), dbGetZombieCount() )
                file_of_receiving = '\tNew file received alarm: \n\n\t\tSpice server got totally %d SPICE files up to now today: including %d user profiles, %d App recording files, %d Network recording files, %d onWiFi recording files, %d onLaunch recording files, and %d Location recording files.\n\n\tDetails of new receives:\n\n'% ( file_number, num_of_twitter, num_of_app, num_of_network, num_of_onwifi, num_of_onlaunch, num_of_location)
                sendMail(result_of_receiving + file_of_receiving + message_for_mail + malicious_info)
                

def runTask(func, day=0, hour=0, min=0, second=0):
        # get current time 
        now = datetime.now()
        strnow = now.strftime('%Y-%m-%d %H:%M:%S')
        period = timedelta(days=day, hours=hour, minutes=min, seconds=second)
        next_time = now + period
        strnext_time = next_time.strftime('%Y-%m-%d %H:%M:%S')
        func()
        #log('[task done] on ' +  datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        while True:
            time.sleep(1)
            now = datetime.now()
            strnow = now.strftime('%Y-%m-%d %H:%M:%S')
            # if system time eq next_time run the specific task(hello func)
            if str(strnow) == str(strnext_time):                       
                func()
                strnext_time = (now + period).strftime('%Y-%m-%d %H:%M:%S')
                
#########################################################################


if __name__ == "__main__":
        # do the UNIX double-fork magic, see Stevens' "Advanced 
        # Programming in the UNIX Environment" for details (ISBN 0201563177)
        try: 
            pid = os.fork() 
            if pid > 0:
                # exit first parent
                sys.exit(0) 
        except OSError, e: 
            print >>sys.stderr, "fork #1 failed: %d (%s)" % (e.errno, e.strerror) 
            sys.exit(1)
        # decouple from parent environment
        os.chdir("/") 
        os.setsid() 
        os.umask(0) 
        # do second fork
        try: 
            pid = os.fork() 
            if pid > 0:
                # exit from second parent, print eventual PID before
                print "Daemon PID %d" % pid
                sys.exit(0) 
        except OSError, e: 
            print >>sys.stderr, "fork #2 failed: %d (%s)" % (e.errno, e.strerror) 
            sys.exit(1) 
        # start the daemon main loop
        #main()
        runTask(LUCIFER, hour = 1)    
                
                    
