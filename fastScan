#!/usr/bin/env python

####Created by Denny C. Ng on Mar 18, 2015
#Copyright @Tsinghua University

import sys
import MySQLdb


MySQLAddr = 'addr'
MySQLUser = 'usr'
MySQLPass = 'pass'
MySQLDB = 'db'


sys.path.insert(0,"/home/chaowu/deamons/FileHandler")
from spiValidation import isFileValide as validation

root = "/home/chaowu/spice/buffer"

def dbGetTwitterCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(DISTINCT twitter) FROM TWIDERE"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()

def dbGetUUIDCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(DISTINCT uuid) FROM TWIDERE"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
                
def dbGetZombieCount():
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT COUNT(original) FROM UUIDMAP"
        try:
           cursor.execute(sql)
           results = cursor.fetchone()[0]
           
           if results is not None:
                   return results
           
           return None        
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
   
def getSize(Sfile):
        return os.path.getsize(Sfile)
  
  
  
def sizeof_fmt(num, suffix='B'):
    num = int(num)
    for unit in ['','K','M','G','T','P','E','Z']:
        if abs(num) < 1024.0:
            return "%3.1f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f %s%s" % (num, 'Yi', suffix)
    
           
            
def getProfileSize(uuid, twitter):
        for name in os.listdir(root):
                if os.path.isfile(os.path.join(root,name)):
                        if len(name.split('-')) > 1:
                                spiceName = name.split('-')[1]
                                if spiceName.split('_')[0] != uuid:
                                        continue
                                else:
                                        if spiceName.split('_')[1] == twitter:
                                                return sizeof_fmt(getSize(root + '/' + name))
                                        else:
                                                continue                                      

def getBuffer():
        for name in os.listdir(root):
                if os.path.isfile(os.path.join(root,name)):
                    if validation(name) == True:
                        spiceName = name.split('-')[1]
                        print '\tDevice: [' + spiceName.split('_')[0] + '] \t Twitter: [' + spiceName.split('_')[1] + ']\t Size: ' +str(getProfileSize(spiceName.split('_')[0], spiceName.split('_')[1]))
                    else:
                        print '\tMalicious file: ' + name
                                

def getTopUUID(num):
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT * FROM DEVICE_STATISTIC ORDER BY size_in_byte DESC LIMIT %d" % num 
        try:
           cursor.execute(sql)
           results = cursor.fetchall()
           if results is not None:
                   for row in results:
                          print row
           elif results is None:
               print None
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()
        
        
def getTopTwitter(num):
        db = MySQLdb.connect(MySQLAddr, MySQLUser , MySQLPass, MySQLDB)
        cursor = db.cursor()
        
        sql = "SELECT * FROM TWITTER_STATISTIC ORDER BY size_in_byte DESC LIMIT %d" % num
        try:
           cursor.execute(sql)
           results = cursor.fetchall()
           if results is not None:
               for row in results:
                       print row
           elif results is None:
               print None
        except:
           print "Error: unable to fecth data"
           #database or table errors
           return None
        finally:
                db.close()


def getTop(action, rang):
        if action == 'dev':
                num = dbGetUUIDCount()
                if rang > num:
                        print 'only %d devices have checked-in, the following is in the range of %d.' % (num, num)
                        rang = num
                getTopUUID(rang)
        elif action == 'acc':
                num = dbGetTwitterCount()
                if rang > num:
                        print 'only %d twitter accounts have checked-in, the following is in the range of %d.' % (num, num)
                        rang = num
                getTopTwitter(rang)                      
                

def operation(arg):
    if arg == 'twitter':
        print '\tNumber of already check-in Twitter accounts: ' + str(dbGetTwitterCount())
    elif arg == 'uuid':
        print '\tNumber of already check-in Devices: ' + str(dbGetUUIDCount())
    elif arg == 'buffer':
        getBuffer()
    elif arg == 'zombie':
        print '\tNumber of zombie Devices: ' + str(dbGetZombieCount())
    elif arg == 'help':
        print 'operation can be:\ntwitter: to see the number of check-in twitter accounts\nuuid: to see the number of check-in devices\
        \nbuffer: to see user profiles currently in the spice/buffer\nzombie: to see the number of zombie devices'                
        
        
def main(argv):
    if len(argv) == 1:
            print 'use help to see the arguments'
            return
    for arg in argv:
            if arg == 'top':
                    try:
                            if argv[3]== 'dev' or argv[3] == 'acc':
                                    getTop(str(argv[3]), int(argv[2]))
                    except: 
                            print 'Parameters error!'
                    
            elif arg == 'LUCIFER':
                    os.system("python /home/chaowu/deamons/LUCIFER/LUCIFER.py")
            elif arg == 'FILE':
                    os.system("python /home/chaowu/deamons/FileHandler/FILE_HANDLER.py")
            elif arg == 'STAT':
                    os.system("python /home/chaowu/deamons/StatisticHandler/Statistic_handler.py") 
            else:
                    operation(arg)
      
    
if __name__ == '__main__':
    main(sys.argv)
